<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>04 | 编写你的第一个TypeScript程序</title>
    <url>/2021/02/01/04%20%7C%20%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AATypeScript%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li><h3 id="初始化package-json"><a href="#初始化package-json" class="headerlink" title="初始化package.json"></a>初始化package.json</h3><p><code>npm init -y</code></p>
</li>
<li><h3 id="全局安装TypeScript"><a href="#全局安装TypeScript" class="headerlink" title="全局安装TypeScript"></a>全局安装TypeScript</h3><p><code>npm i typescript -g</code></p>
</li>
<li><h3 id="初始化TypeScript"><a href="#初始化TypeScript" class="headerlink" title="初始化TypeScript"></a>初始化TypeScript</h3><p><code>tsc --init</code></p>
</li>
<li><h3 id="新建一个src目录并创建一个index-ts文件并写入以下内容"><a href="#新建一个src目录并创建一个index-ts文件并写入以下内容" class="headerlink" title="新建一个src目录并创建一个index.ts文件并写入以下内容"></a>新建一个src目录并创建一个<code>index.ts</code>文件并写入以下内容</h3><p><code>let hello : string = &#39;Hello TypeScript&#39;</code></p>
</li>
<li><h3 id="编译该文件"><a href="#编译该文件" class="headerlink" title="编译该文件"></a>编译该文件</h3><p><code>tsc ./src/index.ts</code></p>
</li>
<li><h3 id="执行后生成一个index-js文件并生成以下内容"><a href="#执行后生成一个index-js文件并生成以下内容" class="headerlink" title="执行后生成一个index.js文件并生成以下内容"></a>执行后生成一个<code>index.js</code>文件并生成以下内容</h3><p><code>var hello = &#39;Hello TypeScript&#39;;</code></p>
</li>
<li><h3 id="安装打包工具"><a href="#安装打包工具" class="headerlink" title="安装打包工具"></a>安装打包工具</h3><p><code>npm i webpack webpack-cli webpack-dev-server -D</code></p>
</li>
<li><h3 id="创建build目录，用来存放所有的配置文件，并创建4个配置文件"><a href="#创建build目录，用来存放所有的配置文件，并创建4个配置文件" class="headerlink" title="创建build目录，用来存放所有的配置文件，并创建4个配置文件"></a>创建<code>build</code>目录，用来存放所有的配置文件，并创建4个配置文件</h3><p><code>webpack.config.js</code><br><code>webpack.base.config.js</code><br><code>webpack.dev.config.js</code><br><code>webpack.pro.config.js</code></p>
</li>
<li><h3 id="其中webpack-base-config-js内容"><a href="#其中webpack-base-config-js内容" class="headerlink" title="其中webpack.base.config.js内容"></a>其中<code>webpack.base.config.js</code>内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	entry: &#39;.&#x2F;src&#x2F;index.ts&#39;, &#x2F;&#x2F; 指定入口文件</span><br><span class="line">	output: &#123;</span><br><span class="line">		filename: &#39;app.js&#39; &#x2F;&#x2F; 输出的文件名为app.js</span><br><span class="line">	&#125;,</span><br><span class="line">	resolve: &#123;</span><br><span class="line">		extensions: [&#39;.js&#39;, &#39;.ts&#39;, &#39;tsx&#39;] &#x2F;&#x2F; 输出的目录是默认的，输出的扩展名，js,ts,tsx</span><br><span class="line">	&#125;,</span><br><span class="line">	module: &#123;</span><br><span class="line">		rules: [</span><br><span class="line">			&#123;</span><br><span class="line">				test: &#x2F;\.tsx?$&#x2F;i, &#x2F;&#x2F; 正则以ts或者tsx为结尾的文件</span><br><span class="line">				use: [&#123;</span><br><span class="line">					loader: &#39;ts-loader&#39;, &#x2F;&#x2F; 使用ts-loader, npm i ts-loader typescript -D</span><br><span class="line">				&#125;],</span><br><span class="line">				exclude: &#x2F;node_modules&#x2F; &#x2F;&#x2F; 排除node_modules文件</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins: [</span><br><span class="line">		new HtmlWebpackPlugin(&#123; &#x2F;&#x2F; 插件,通过一个模板帮助我们生成网站的一个首页并把输出文件自动嵌入文件中</span><br><span class="line">			template: &quot;.&#x2F;src&#x2F;tpl&#x2F;index.html&quot; &#x2F;&#x2F; npm i html-webpack-plugin -D</span><br><span class="line">		&#125;)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="需要安装以下依赖"><a href="#需要安装以下依赖" class="headerlink" title="需要安装以下依赖"></a>需要安装以下依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i ts-loader typescript -D</span><br><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="在src目录下新建-tpl-index-html文件并写入以下内容"><a href="#在src目录下新建-tpl-index-html文件并写入以下内容" class="headerlink" title="在src目录下新建/tpl/index.html文件并写入以下内容"></a>在src目录下新建<code>/tpl/index.html</code>文件并写入以下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">	      content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">	&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">	&lt;title&gt;TypeScript in Action&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="其中webpack-dev-config-js内容"><a href="#其中webpack-dev-config-js内容" class="headerlink" title="其中webpack.dev.config.js内容"></a>其中<code>webpack.dev.config.js</code>内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	devtool: &#39;cheap-module-eval-source-map&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="其中webpack-pro-config-js内容"><a href="#其中webpack-pro-config-js内容" class="headerlink" title="其中webpack.pro.config.js内容"></a>其中<code>webpack.pro.config.js</code>内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	plugins: [</span><br><span class="line">		new CleanWebpackPlugin &#x2F;&#x2F; 每次成功构建后清空目录</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="需要安装以下依赖-1"><a href="#需要安装以下依赖-1" class="headerlink" title="需要安装以下依赖"></a>需要安装以下依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="其中webpack-config-js内容"><a href="#其中webpack-config-js内容" class="headerlink" title="其中webpack.config.js内容"></a>其中<code>webpack.config.js</code>内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; merge &#125; &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">const baseConfig &#x3D; require(&#39;.&#x2F;webpack.base.config&#39;);</span><br><span class="line">const devConfig &#x3D; require(&#39;.&#x2F;webpack.dev.config&#39;);</span><br><span class="line">const proConfig &#x3D; require(&#39;.&#x2F;webpack.pro.config&#39;);</span><br><span class="line"></span><br><span class="line">let config &#x3D; process.NODE_EVN &#x3D;&#x3D;&#x3D; &#39;development&#39; ? devConfig : proConfig;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; merge(baseConfig, config); &#x2F;&#x2F; 使这些文件合并 npm i webpack-merge -D</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="需要安装以下依赖-2"><a href="#需要安装以下依赖-2" class="headerlink" title="需要安装以下依赖"></a>需要安装以下依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack-merge -D</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="修改npm的脚本，打开package-json文件并修改以下内容"><a href="#修改npm的脚本，打开package-json文件并修改以下内容" class="headerlink" title="修改npm的脚本，打开package.json文件并修改以下内容"></a>修改npm的脚本，打开<code>package.json</code>文件并修改以下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;ts-in-action&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;index.ts&quot;, &#x2F;&#x2F; 修改这个</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --mode&#x3D;development --config .&#x2F;build&#x2F;webpack.config.js&quot;, &#x2F;&#x2F; 增加这个</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.5.1&quot;,</span><br><span class="line">    &quot;ts-loader&quot;: &quot;^8.0.14&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^4.1.3&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.19.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^4.4.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;,</span><br><span class="line">    &quot;webpack-merge&quot;: &quot;^5.7.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="运行npm-start"><a href="#运行npm-start" class="headerlink" title="运行npm start"></a>运行<code>npm start</code></h3></li>
<li><h3 id="修改index-ts文件并输入以下内容"><a href="#修改index-ts文件并输入以下内容" class="headerlink" title="修改index.ts文件并输入以下内容"></a>修改<code>index.ts</code>文件并输入以下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let hello : String &#x3D; &#39;Hello TypeScript&#39;</span><br><span class="line">document.querySelectorAll(&#39;.app&#39;)[0].innerHTML &#x3D; &#39;hello&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="可以看到页面输入内容改为了hello"><a href="#可以看到页面输入内容改为了hello" class="headerlink" title="可以看到页面输入内容改为了hello"></a>可以看到页面输入内容改为了<code>hello</code></h3></li>
<li><h3 id="编写package-json"><a href="#编写package-json" class="headerlink" title="编写package.json"></a>编写<code>package.json</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;ts-in-action&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;index.ts&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --mode&#x3D;development --config .&#x2F;build&#x2F;webpack.config.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode&#x3D;production --config .&#x2F;build&#x2F;webpack.config.js&quot;, &#x2F;&#x2F; 新增这个</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.5.1&quot;,</span><br><span class="line">    &quot;ts-loader&quot;: &quot;^8.0.14&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^4.1.3&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.19.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^4.4.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;,</span><br><span class="line">    &quot;webpack-merge&quot;: &quot;^5.7.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="运行npm-run-build，可以看到目录下生成了dist文件夹，这就打包好了"><a href="#运行npm-run-build，可以看到目录下生成了dist文件夹，这就打包好了" class="headerlink" title="运行npm run build，可以看到目录下生成了dist文件夹，这就打包好了"></a>运行<code>npm run build</code>，可以看到目录下生成了<code>dist</code>文件夹，这就打包好了</h3></li>
</ul>
]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>05 | 基本类型</title>
    <url>/2021/02/02/05%20%7C%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li><h3 id="ES6-的数据类型-与-TypeScript-的数据类型"><a href="#ES6-的数据类型-与-TypeScript-的数据类型" class="headerlink" title="ES6 的数据类型 与 TypeScript 的数据类型"></a>ES6 的数据类型 与 TypeScript 的数据类型</h3><table style="text-align: center;">
<thead>
<tr>
<th>ES6 的数据类型</th>
<th>TypeScript 的数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>Number</td>
<td>Number</td>
</tr>
<tr>
<td>String</td>
<td>String</td>
</tr>
<tr>
<td>Array</td>
<td>Array</td>
</tr>
<tr>
<td>Function</td>
<td>Function</td>
</tr>
<tr>
<td>Object</td>
<td>Object</td>
</tr>
<tr>
<td>Symbol</td>
<td>Symbol</td>
</tr>
<tr>
<td>undefined</td>
<td>undefined</td>
</tr>
<tr>
<td>null</td>
<td>null</td>
</tr>
<tr>
<td></td>
<td>void</td>
</tr>
<tr>
<td></td>
<td>any</td>
</tr>
<tr>
<td></td>
<td>never</td>
</tr>
<tr>
<td></td>
<td>元组</td>
</tr>
<tr>
<td></td>
<td>枚举</td>
</tr>
<tr>
<td></td>
<td>高级类型</td>
</tr>
</tbody>
</table>


</li>
</ul>
<ul>
<li><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3></li>
</ul>
<blockquote>
<p>作用：相当于强类型语言中的类型声明<br>语法：(变量/函数):type</p>
</blockquote>
<ul>
<li><h3 id="在src文件夹中新建datatype-ts文件，在index-ts中引入该文件"><a href="#在src文件夹中新建datatype-ts文件，在index-ts中引入该文件" class="headerlink" title="在src文件夹中新建datatype.ts文件，在index.ts中引入该文件"></a>在src文件夹中新建<code>datatype.ts</code>文件，在<code>index.ts</code>中引入该文件</h3></li>
</ul>
<blockquote>
<p>index.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;.&#x2F;datatype&#39;; &#x2F;&#x2F; 新增这句话</span><br><span class="line"></span><br><span class="line">let hello : String &#x3D; &#39;Hello TypeScript&#39;;</span><br><span class="line">document.querySelectorAll(&#39;.app&#39;)[0].innerHTML &#x3D; &#39;hello&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>datatype.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 原始类型</span><br><span class="line">let bool: boolean &#x3D; true;</span><br><span class="line">let num: number | undefined | null &#x3D; 123;</span><br><span class="line">let str: string &#x3D; &#39;abc&#39;;</span><br><span class="line">&#x2F;&#x2F; str &#x3D; 123; &#x2F;&#x2F; TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数组</span><br><span class="line">let arr1: number[] &#x3D; [1, 2, 3];</span><br><span class="line">let arr2: Array&lt;number | string&gt; &#x3D; [1, 2, 3, &#39;666&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 元组</span><br><span class="line">let tuple: [number, string] &#x3D; [0, &#39;1&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数</span><br><span class="line">let add &#x3D; (x: number, y:number) &#x3D;&gt; x + y;</span><br><span class="line">let compute: (x: number, y: number) &#x3D;&gt; number;</span><br><span class="line">compute &#x3D; (a, b) &#x3D;&gt; a + b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象</span><br><span class="line">let obj: &#123;x: number, y: number&#125; &#x3D; &#123;x: 1, y: 2&#125;;</span><br><span class="line">obj.x &#x3D; 3;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; symbol</span><br><span class="line">let s1: symbol &#x3D; Symbol();</span><br><span class="line">let s2 &#x3D; Symbol();</span><br><span class="line">console.log(s1 &#x3D;&#x3D;&#x3D; s2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; undefined, null</span><br><span class="line">let un: undefined &#x3D; undefined;</span><br><span class="line">let nu: null &#x3D; null;</span><br><span class="line">num &#x3D; undefined; &#x2F;&#x2F; TS2322: Type &#39;undefined&#39; is not assignable to type &#39;number&#39;.</span><br><span class="line">num &#x3D; null; &#x2F;&#x2F; TS2322: Type &#39;null&#39; is not assignable to type &#39;number&#39;.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; void</span><br><span class="line">let noReturn &#x3D; () &#x3D;&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; any</span><br><span class="line">let x;</span><br><span class="line">x &#x3D; 1;</span><br><span class="line">x &#x3D; [];</span><br><span class="line">x &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; never</span><br><span class="line">let error &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    throw new Error(&#39;error&#39;);</span><br><span class="line">&#125;</span><br><span class="line">let endless &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    while(true) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>06 | 枚举类型</title>
    <url>/2021/02/02/06%20%7C%20%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li><h3 id="在src文件夹中新建enum-ts文件，在index-ts中引入该文件"><a href="#在src文件夹中新建enum-ts文件，在index-ts中引入该文件" class="headerlink" title="在src文件夹中新建enum.ts文件，在index.ts中引入该文件"></a>在src文件夹中新建<code>enum.ts</code>文件，在<code>index.ts</code>中引入该文件</h3></li>
</ul>
<blockquote>
<p>index.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;.&#x2F;datatype&#39;;</span><br><span class="line">import &#39;.&#x2F;enum&#39;; &#x2F;&#x2F; 新增这句话</span><br><span class="line">let hello : String &#x3D; &#39;Hello TypeScript&#39;;</span><br><span class="line">document.querySelectorAll(&#39;.app&#39;)[0].innerHTML &#x3D; &#39;hello&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>enum.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 06-枚举类型</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数字枚举</span><br><span class="line">enum Role &#123;</span><br><span class="line">    Reporter &#x3D; 1,</span><br><span class="line">    Developer,</span><br><span class="line">    Maintainer,</span><br><span class="line">    Owner,</span><br><span class="line">    Guest</span><br><span class="line">&#125;</span><br><span class="line">console.log(Role.Reporter)</span><br><span class="line">console.log(Role)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字符串枚举</span><br><span class="line">enum Message &#123;</span><br><span class="line">    Success &#x3D; &#39;恭喜你，成功了&#39;,</span><br><span class="line">    Fail &#x3D; &#39;抱歉，失败了&#39;</span><br><span class="line">&#125;</span><br><span class="line">console.log(Message)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 异构枚举，容易混淆，不建议使用</span><br><span class="line">enum Answer &#123;</span><br><span class="line">    N,</span><br><span class="line">    Y &#x3D; &#39;Yes&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 枚举成员</span><br><span class="line">&#x2F;&#x2F; Role.Reporter &#x3D; 2</span><br><span class="line">enum Char &#123;</span><br><span class="line">&#x2F;&#x2F; const</span><br><span class="line">    a,</span><br><span class="line">    b &#x3D; Char.a,</span><br><span class="line">    c&#x3D; 1 + 3,</span><br><span class="line">    d &#x3D; Math.random(),</span><br><span class="line">    e &#x3D; &#39;123&#39;.length,</span><br><span class="line">    f &#x3D; 4</span><br><span class="line">&#125;</span><br><span class="line">console.log(Char)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 常量枚举</span><br><span class="line">const enum Month &#123;</span><br><span class="line">    Jan,</span><br><span class="line">    Feb,</span><br><span class="line">    Mar</span><br><span class="line">&#125;</span><br><span class="line">let month &#x3D; [Month.Jan, Month.Feb, Month.Mar]</span><br><span class="line">console.log(month)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 枚举类型</span><br><span class="line">enum E &#123; a, b&#125;</span><br><span class="line">enum F &#123; a &#x3D; 0, b &#x3D; 1&#125;</span><br><span class="line">enum G &#123; a &#x3D; &#39;apple&#39;, b &#x3D; &#39;banana&#39;&#125;</span><br><span class="line"></span><br><span class="line">let e: E &#x3D; 3</span><br><span class="line">let f: F &#x3D; 3</span><br><span class="line">&#x2F;&#x2F; e &#x3D;&#x3D;&#x3D; f</span><br><span class="line"></span><br><span class="line">let e1: E.a &#x3D; 1</span><br><span class="line">let e2: E.b</span><br><span class="line">&#x2F;&#x2F; e1 &#x3D;&#x3D;&#x3D; e2</span><br><span class="line">let e3: E.a &#x3D; 1</span><br><span class="line">e1 &#x3D;&#x3D;&#x3D; e3</span><br><span class="line"></span><br><span class="line">let g1: G &#x3D; G.b</span><br><span class="line">let g2: G.a &#x3D; G.a</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>07 | 接口（1）：对象类型接口</title>
    <url>/2022/02/25/07-%E6%8E%A5%E5%8F%A3%EF%BC%881%EF%BC%89%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p>interface.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface List &#123;</span><br><span class="line">    readonly id: number,</span><br><span class="line">    name:string,</span><br><span class="line">    &#x2F;&#x2F; [x: string]: any;</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line">interface Result &#123;</span><br><span class="line">    data:List[]</span><br><span class="line">&#125;</span><br><span class="line">function render(result: Result) &#123;</span><br><span class="line">  result.data.forEach((value) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(value.id, value.name);</span><br><span class="line">    if (value.age) &#123;</span><br><span class="line">      console.log(value.age);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; value.id++</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">const result &#x3D; &#123;</span><br><span class="line">  &#39;data&#39;: [</span><br><span class="line">    &#123; &#39;id&#39;: 1, &#39;name&#39;: &#39;A&#39;, &#39;sex&#39;: &#39;male&#39; &#125;,</span><br><span class="line">    &#123; &#39;id&#39;: 2, &#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 10 &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line">render(result);</span><br><span class="line"></span><br><span class="line">interface StringArray&#123;</span><br><span class="line">  [index: number]: string</span><br><span class="line">&#125;</span><br><span class="line">let chars: StringArray &#x3D; [&#39;A&#39;, &#39;B&#39;]</span><br><span class="line"></span><br><span class="line">interface Names&#123;</span><br><span class="line">  [x: string]: any;</span><br><span class="line">  &#x2F;&#x2F; y: number;</span><br><span class="line">  [z: number]: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; render(&lt;Result&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;     &#39;data&#39;: [</span><br><span class="line">&#x2F;&#x2F;         &#123; &#39;id&#39;: 1, &#39;name&#39;: &#39;A&#39;, &#39;sex&#39;: &#39;male&#39; &#125;,</span><br><span class="line">&#x2F;&#x2F;         &#123; &#39;id&#39;: 2, &#39;name&#39;: &#39;B&#39; &#125;</span><br><span class="line">&#x2F;&#x2F;     ]</span><br><span class="line">&#x2F;&#x2F; &#125; as Result);</span><br><span class="line">&#x2F;&#x2F; render(&lt;Result&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;   &#39;data&#39;: [</span><br><span class="line">&#x2F;&#x2F;     &#123; &#39;id&#39;: 1, &#39;name&#39;: &#39;A&#39;, &#39;sex&#39;: &#39;male&#39; &#125;,</span><br><span class="line">&#x2F;&#x2F;     &#123; &#39;id&#39;: 2, &#39;name&#39;: &#39;B&#39; &#125;</span><br><span class="line">&#x2F;&#x2F;   ]</span><br><span class="line">&#x2F;&#x2F; &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>08 | 接口（2）：函数类型接口</title>
    <url>/2022/02/25/08-%E6%8E%A5%E5%8F%A3%EF%BC%882%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p>interface1.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; let add: (x:number,y:number) &#x3D;&gt; number</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; interface Add&#123;</span><br><span class="line">&#x2F;&#x2F;     (x:number, y:number): number</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">type  Adds &#x3D; (x: number, y:number) &#x3D;&gt; number</span><br><span class="line"></span><br><span class="line">let adds: Adds &#x3D; (a, b) &#x3D;&gt; a + b</span><br><span class="line"></span><br><span class="line">interface Lib&#123;</span><br><span class="line">    ():void;</span><br><span class="line">    version: string;</span><br><span class="line">    doSomething():void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getLib()&#123;</span><br><span class="line">    let lib: Lib &#x3D; (() &#x3D;&gt; &#123;&#125;) as Lib</span><br><span class="line">    lib.version &#x3D; &#39;1.0&#39;;</span><br><span class="line">    lib.doSomething &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">    return lib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let lib1 &#x3D; getLib();</span><br><span class="line">lib1();</span><br><span class="line">lib1.doSomething();</span><br><span class="line"></span><br><span class="line">let lib2 &#x3D; getLib();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>09 | 函数相关知识点梳理</title>
    <url>/2022/02/25/09-%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>function.ts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数定义</span><br><span class="line">function add1(x:number, y:number)&#123;</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let add2: (x:number, y:number) &#x3D;&gt; number</span><br><span class="line"></span><br><span class="line">type add3 &#x3D; (x:number, y:number) &#x3D;&gt; number</span><br><span class="line"></span><br><span class="line">interface add4&#123;</span><br><span class="line">    (x:number,y:number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; add1(1,2,3)</span><br><span class="line"></span><br><span class="line">function add5(x:number,y?:number)&#123;</span><br><span class="line">    return y?x+y:x;</span><br><span class="line">&#125;</span><br><span class="line">add5(1)</span><br><span class="line"></span><br><span class="line">function add6(x:number,y&#x3D;0,z:number,q&#x3D;1)&#123;</span><br><span class="line">    return x + y + z + q;</span><br><span class="line">&#125;</span><br><span class="line">console.log(add6(1,undefined, 3));</span><br><span class="line"></span><br><span class="line">function add7(x:number,...rest:number[])&#123;</span><br><span class="line">    return x + rest.reduce((pre, cur)&#x3D;&gt; pre +cur) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(add7(1,2,3,4,5))</span><br><span class="line"></span><br><span class="line">function add8(...rest: number[]): number;</span><br><span class="line">function add8(...rest: string[]): string;</span><br><span class="line">function add8(...rest: any[]): any&#123;</span><br><span class="line">    let first &#x3D; rest[0];</span><br><span class="line">    if(typeof first &#x3D;&#x3D;&#x3D; &#39;string&#39;)&#123;</span><br><span class="line">        return rest.join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(typeof first &#x3D;&#x3D;&#x3D; &#39;number&#39;)&#123;</span><br><span class="line">        return rest.reduce((pre, cur)&#x3D;&gt; pre + cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(add8(1,2,3));</span><br><span class="line">console.log(add8(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习路径</category>
        <category>前端工程师</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到GuoYu的博客</title>
    <url>/2020/12/17/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0GuoYu%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>本站主页：<br><a href="https://www.guoyu.ren/">https://www.guoyu.ren/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>OTHER</tag>
      </tags>
  </entry>
</search>
